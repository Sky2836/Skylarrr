--SkyHub Mobile Version--

if game:GetService("CoreGui"):FindFirstChild("Library") then
        game:GetService("CoreGui"):FindFirstChild("Library"):Destroy()
end

_G.WindowBackgroundColor = Color3.fromRGB(12, 12, 12)
_G.TitleTextColor = Color3.fromRGB(150, 150, 150)
_G.HubTitleColor = Color3.fromRGB(55, 122, 204)
_G.ContainerBackgroundColor = Color3.fromRGB(40, 40, 40)
_G.TabWindowColor = Color3.fromRGB(0, 0, 0)
_G.TabTextColor = Color3.fromRGB(180, 180, 180)
_G.ImageColor = Color3.fromRGB(180, 180, 180)
_G.ElementTextColor = Color3.fromRGB(0, 100, 200)
_G.ElementThemeColor = Color3.fromRGB(0, 50, 130)
_G.WindowBackgroundColor1 = Color3.fromRGB(0, 0, 0)
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local SkyLib = {}

function SkyLib:Window(gametitle)
    local FirstTab = false
    local Library = Instance.new("ScreenGui")
    local WindowFrame = Instance.new("Frame")
    local WindowFrameCorner = Instance.new("UICorner")
    local SkyName = Instance.new("ImageLabel")
    local ImageTitle = Instance.new("ImageLabel")
    local HubTitle = Instance.new("TextLabel")
    local MinWindow = Instance.new("TextButton")
    local GameTitle = Instance.new("TextLabel")
    local TabWindow = Instance.new("ScrollingFrame")
    local TabWindowList = Instance.new("UIListLayout")
    local ContainerHolder = Instance.new("Frame")
    
    --Properties:
    
    Library.Name = "Library"
    Library.Parent = game.CoreGui
    Library.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    WindowFrame.Name = "WindowFrame"
    WindowFrame.Parent = Library
    WindowFrame.BackgroundColor3 = _G.WindowBackgroundColor
    WindowFrame.BorderSizePixel = 0
    WindowFrame.Position = UDim2.new(0, 226, 0, 39)
    WindowFrame.Size = UDim2.new(0, 500, 0, 300)
    WindowFrame.ClipsDescendants = true
    
    WindowFrameCorner.Parent = WindowFrame
    WindowFrameCorner.CornerRadius = UDim.new(0, 5)
    
    ImageTitle.Name = "ImageTitle"
    ImageTitle.Parent = WindowFrame
    ImageTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ImageTitle.BackgroundTransparency = 1.000
    ImageTitle.Position = UDim2.new(0, 5, 0, 0)
    ImageTitle.Size = UDim2.new(0, 35, 0, 24)
    ImageTitle.Image = "rbxassetid://8546708701"
    
    SkyName.Name = "SkyName"
    SkyName.Parent = WindowFrame
    SkyName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SkyName.BackgroundTransparency = 1.000
    SkyName.Position = UDim2.new(0, 35, 0, 4)
    SkyName.Size = UDim2.new(0, 35, 0, 15)
    SkyName.Image = "rbxassetid://8556695228"
    SkyName.ImageColor3 = Color3.fromRGB(0, 140, 255)
    
    HubTitle.Name = "HubTitle"
    HubTitle.Parent = WindowFrame
    HubTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HubTitle.BackgroundTransparency = 1.000
    HubTitle.BorderSizePixel = 0
    HubTitle.Position = UDim2.new(0, 70, 0, 0)
    HubTitle.Size = UDim2.new(0, 35, 0, 25)
    HubTitle.Font = Enum.Font.GothamSemibold
    HubTitle.Text = "Hub |"
    HubTitle.TextColor3 = _G.TitleTextColor
    HubTitle.TextSize = 13.000
    
    GameTitle.Name = "GameTitle"
    GameTitle.Parent = WindowFrame
    GameTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GameTitle.BackgroundTransparency = 1.000
    GameTitle.BorderSizePixel = 0
    GameTitle.Position = UDim2.new(0, 109, 0, 0)
    GameTitle.Size = UDim2.new(0, 305, 0, 25)
    GameTitle.Font = Enum.Font.GothamSemibold
    GameTitle.Text = gametitle
    GameTitle.TextColor3 = _G.TitleTextColor
    GameTitle.TextSize = 13.000
    GameTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    MinWindow.Name = "MinWindow"
    MinWindow.Parent = WindowFrame
    MinWindow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MinWindow.BackgroundTransparency = 1.000
    MinWindow.BorderSizePixel = 0
    MinWindow.Position = UDim2.new(0, 470, 0, 0)
    MinWindow.Size = UDim2.new(0, 30, 0, 25)
    MinWindow.Font = Enum.Font.GothamSemibold
    MinWindow.Text = "Ã—"
    MinWindow.TextColor3 = _G.ElementTextColor
    MinWindow.TextSize = 25.000
    
    TabWindow.Name = "TabWindow"
    TabWindow.Parent = WindowFrame
    TabWindow.Active = true
    TabWindow.BackgroundColor3 = _G.TabWindowColor
    TabWindow.BorderSizePixel = 0
    TabWindow.Position = UDim2.new(0, 2, 0, 25)
    TabWindow.Size = UDim2.new(0, 496, 0, 25)
    
    TabWindowList.Name = "TabWindowList"
    TabWindowList.Parent = TabWindow
    TabWindowList.FillDirection = Enum.FillDirection.Horizontal
    TabWindowList.SortOrder = Enum.SortOrder.LayoutOrder
    TabWindowList.Padding = UDim.new(0, 5)
    TabWindowList.VerticalAlignment = Enum.VerticalAlignment.Center
    
    ContainerHolder.Name = "ContainerHolder"
    ContainerHolder.Parent = WindowFrame
    ContainerHolder.BackgroundColor3 = _G.ContainerBackgroundColor
    ContainerHolder.BackgroundTransparency = 1.000
    ContainerHolder.BorderSizePixel = 0
    ContainerHolder.Position = UDim2.new(0, 2, 0, 55)
    ContainerHolder.Size = UDim2.new(0, 496, 0, 244)

    -- Don't Touch This Script Or It Will Mess Up --
    TabWindow.CanvasSize = UDim2.new(0, 0 + TabWindowList.AbsoluteContentSize.X, 0, 0)
    TabWindowList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabWindow.CanvasSize = UDim2.new(0, 0 + TabWindowList.AbsoluteContentSize.X, 0, 0)
    end)
    
    MinWindow.MouseButton1Click:Connect(function()
        if FirstTab == true then
            TweenService:Create(WindowFrame, TweenInfo.new(.9, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 500, 0, 300)}):Play()
            TweenService:Create(MinWindow, TweenInfo.new(.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0}):Play()
            else
                TweenService:Create(WindowFrame, TweenInfo.new(.9, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 500, 0, 25)}):Play()
                TweenService:Create(MinWindow, TweenInfo.new(.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = -135}):Play()
        end
        FirstTab = not FirstTab
    end)
    
    local gui = WindowFrame
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    local Tabs = {}
    function Tabs:Tab(tabtitle)
        local ContainerLeft = Instance.new("ScrollingFrame")
        local ContainerListLeft = Instance.new("UIListLayout")
        local ContainerRight = Instance.new("ScrollingFrame")
        local ContainerListRight = Instance.new("UIListLayout")
        
        --Properties:
        
        ContainerLeft.Name = "ContainerLeft"
        ContainerLeft.Parent = ContainerHolder
        ContainerLeft.Active = true
        ContainerLeft.BackgroundColor3 = _G.WindowBackgroundColor1
        ContainerLeft.BackgroundTransparency = 0
        ContainerLeft.BorderSizePixel = 0
        ContainerLeft.Position = UDim2.new(0, 2, 0, 0)
        ContainerLeft.Size = UDim2.new(0, 242, 0, 240)
        ContainerLeft.Visible = false
        ContainerLeft.CanvasSize = UDim2.new(0, 0, 0, 2 + ContainerListLeft.Padding.Offset + ContainerListLeft.AbsoluteContentSize.Y)
        ContainerLeft.ScrollBarThickness = 0
        
        ContainerListLeft.Name = "ContainerListLeft"
        ContainerListLeft.Parent = ContainerLeft
        ContainerListLeft.HorizontalAlignment = Enum.HorizontalAlignment.Left
        ContainerListLeft.SortOrder = Enum.SortOrder.LayoutOrder
        ContainerListLeft.Padding = UDim.new(0, 5)
        
        ContainerRight.Name = "ContainerRight"
        ContainerRight.Parent = ContainerHolder
        ContainerRight.Active = true
        ContainerRight.BackgroundColor3 = _G.WindowBackgroundColor1
        ContainerRight.BackgroundTransparency = 0
        ContainerRight.BorderSizePixel = 0
        ContainerRight.Position = UDim2.new(0, 252, 0, 0)
        ContainerRight.Size = UDim2.new(0, 242, 0, 240)
        ContainerRight.Visible = false
        ContainerRight.CanvasSize = UDim2.new(0, 0, 0, 2 + ContainerListRight.Padding.Offset + ContainerListRight.AbsoluteContentSize.Y)
        ContainerRight.ScrollBarThickness = 0
        
        ContainerListRight.Name = "ContainerListRight"
        ContainerListRight.Parent = ContainerRight
        ContainerListRight.HorizontalAlignment = Enum.HorizontalAlignment.Right
        ContainerListRight.SortOrder = Enum.SortOrder.LayoutOrder
        ContainerListRight.Padding = UDim.new(0, 5)

        -- Don't Touch This Script Or It Will Mess Up --
        ContainerListLeft:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            ContainerLeft.CanvasSize = UDim2.new(0, 0, 0, 0 + ContainerListLeft.Padding.Offset + ContainerListLeft.AbsoluteContentSize.Y)
        end)
        
        ContainerLeft.ChildAdded:Connect(function()
            ContainerLeft.CanvasSize = UDim2.new(0, 0, 0, 0 + ContainerListLeft.Padding.Offset + ContainerListLeft.AbsoluteContentSize.Y)
        end)
        
        ContainerListRight:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            ContainerRight.CanvasSize = UDim2.new(0, 0, 0, 0 + ContainerListRight.Padding.Offset + ContainerListRight.AbsoluteContentSize.Y)
        end)
        
        ContainerRight.ChildAdded:Connect(function()
            ContainerRight.CanvasSize = UDim2.new(0, 0, 0, 0 + ContainerListRight.Padding.Offset + ContainerListRight.AbsoluteContentSize.Y)
        end)
        
        
        local TabButton = Instance.new("TextButton")
   
        --Properties:
        
        TabButton.Name = "TabButton"
        TabButton.Parent = TabWindow
        TabButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.BackgroundTransparency = 1.000
        TabButton.BorderSizePixel = 0
        TabButton.Position = UDim2.new(0, 25, 0, 2)
        TabButton.Size = UDim2.new(0, 75, 0, 25)
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.Text = tabtitle or "Tab"
        TabButton.TextColor3 = _G.ElementTextColor
        TabButton.TextSize = 13.000
        
        -- Don't Touch This Script Or It Will Mess Up --

        TabButton.Size = UDim2.new(0, 10 + TabButton.TextBounds.X, 0, 20)
        
        TabButton.MouseButton1Click:Connect(function()
            for _, co in pairs(ContainerHolder:GetChildren()) do
                if co:IsA("ScrollingFrame") then
                    co.Visible = false
                end
            end
            for _, tb in pairs(TabWindow:GetChildren()) do
                if tb:IsA("TextButton") then
                    TweenService:Create(tb, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                end
            end
            TweenService:Create(TabButton, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.5}):Play()
            ContainerLeft.Visible = true
            ContainerRight.Visible = true
        end)
        
        local Section = {}
        function Section:Left(sectiontitle)
            local Section = Instance.new("Frame")
            local SectionTitle = Instance.new("TextLabel")
            local SectionLeft = Instance.new("Frame")
            local SectionLeftUICorner = Instance.new("UICorner")
            local SectionLeftList = Instance.new("UIListLayout")
            
            Section.Name = sectiontitle or "Section"
            Section.Parent = ContainerLeft
            Section.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            Section.BackgroundTransparency = 1.000
            Section.Size = UDim2.new(0, 240, 0, 20)
            
            SectionLeft.Name = "SectionLeft"
            SectionLeft.Parent = Section
            SectionLeft.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            SectionLeft.BackgroundTransparency = 1.000
            SectionLeft.BorderSizePixel = 0
            SectionLeft.Position = UDim2.new(0, 0, 0, 5)
            SectionLeft.Size = UDim2.new(0, 240, 0, 70)
            
            SectionLeftUICorner.CornerRadius = UDim.new(0, 5)
            SectionLeftUICorner.Name = "SectionLeftUICorner"
            SectionLeftUICorner.Parent = SectionLeft
            
            SectionLeftList.Name = "SectionLeftList"
            SectionLeftList.Parent = SectionLeft
            SectionLeftList.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionLeftList.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLeftList.Padding = UDim.new(0, 10)
            
            SectionLeft.Size = UDim2.new(0, 240, 0, 5 + SectionLeftList.AbsoluteContentSize.Y + SectionLeftList.Padding.Offset)
            SectionLeftList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionLeft.Size = UDim2.new(0, 240, 0, 5 + SectionLeftList.AbsoluteContentSize.Y + SectionLeftList.Padding.Offset)
                
            end)
            
            local function ContainerLeftSizeChange()
                local largestLeftListSize = 0
				largestLeftListSize = SectionLeftList.AbsoluteContentSize.Y
				
				ContainerLeft.CanvasSize = UDim2.new(0, 0, 0, largestLeftListSize + 35 + SectionLeftList.Padding.Offset)
			end
            local function sectionleftsizechange()
				SectionLeft.Size = UDim2.new(0, 240, 0, 20 + SectionLeftList.AbsoluteContentSize.Y + SectionLeftList.Padding.Offset)
			end
            ContainerLeftSizeChange()
            sectionleftsizechange()

            SectionLeftList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                ContainerLeftSizeChange()
                sectionleftsizechange()
            end)
            
            local Menu = {}
            function Menu:Button(buttontitle, buttoncallback)
                local ButtonHolder = Instance.new("TextButton")
                local ButtonHolderUICorner = Instance.new("UICorner")
                local ButtonHolderUIStroke = Instance.new("UIStroke")
                
                ButtonHolder.Name = buttontitle or "ButtonHolder"
                ButtonHolder.Parent = SectionLeft or SectionRight
                ButtonHolder.BackgroundColor3 = _G.ElementThemeColor
                ButtonHolder.BackgroundTransparency = 1.000
                ButtonHolder.BorderSizePixel = 0
                ButtonHolder.Position = UDim2.new(0, 0, 0, 5)
                ButtonHolder.Size = UDim2.new(0, 220, 0, 20)
                ButtonHolder.AutoButtonColor = false
                ButtonHolder.Font = Enum.Font.GothamSemibold
                ButtonHolder.Text = buttontitle or "Button | Click Me"
                ButtonHolder.TextColor3 = _G.ElementTextColor
                ButtonHolder.TextSize = 13.000
                
                ButtonHolderUICorner.CornerRadius = UDim.new(0, 1)
                ButtonHolderUICorner.Name = "ButtonHolderUICorner"
                ButtonHolderUICorner.Parent = ButtonHolder
                
                ButtonHolderUIStroke.Name = "ButtonHolderUIStroke"
                ButtonHolderUIStroke.Parent = ButtonHolder
                ButtonHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                ButtonHolderUIStroke.Color = _G.ElementThemeColor
                ButtonHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                ButtonHolderUIStroke.Thickness = 1
                ButtonHolderUIStroke.Transparency = 0
                ButtonHolderUIStroke.Enabled = true
                ButtonHolderUIStroke.Archivable = true
                
                ButtonHolder.MouseEnter:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(ButtonHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                    
                end)
                ButtonHolder.MouseLeave:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(ButtonHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 220, 0, 20)}):Play()
                end)
                ButtonHolder.MouseButton1Down:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 15)}):Play()
                end)
                ButtonHolder.MouseButton1Up:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 220, 0, 20)}):Play()
                end)
                ButtonHolder.MouseButton1Click:Connect(function()
                    pcall(function()
                        buttoncallback()
                    end)
                end)
            end
            
            function Menu:Toggle(toggletitle, togglecallback)
                local ToggleHolder = Instance.new("Frame")
                local ToggleHolderUICorner = Instance.new("UICorner")
                local ToggleTitle = Instance.new("TextLabel")
                local ToggleOut = Instance.new("ImageLabel")
                local ToggleOutUICorner = Instance.new("UICorner")
                local ToggleIn = Instance.new("ImageLabel")
                local ToggleInUICorner = Instance.new("UICorner")
                local ToggleHolderButton = Instance.new("TextButton")
                local ToggleHolderUIStroke = Instance.new("UIStroke")
                
                ToggleHolder.Name = toggletitle or "ToggleHolder"
                ToggleHolder.Parent = SectionLeft or SectionRight
                ToggleHolder.BackgroundColor3 = _G.WindowBackgroundColor
                ToggleHolder.BorderSizePixel = 0
                ToggleHolder.Size = UDim2.new(0, 220, 0, 20)
                
                ToggleHolderUICorner.CornerRadius = UDim.new(0, 1)
                ToggleHolderUICorner.Name = "ToggleHolderUICorner"
                ToggleHolderUICorner.Parent = ToggleHolder
                
                ToggleTitle.Name = "ToggleTitle"
                ToggleTitle.Parent = ToggleHolder
                ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleTitle.BackgroundTransparency = 1.000
                ToggleTitle.BorderSizePixel = 0
                ToggleTitle.Position = UDim2.new(0, 5, 0, 0)
                ToggleTitle.Size = UDim2.new(0, 220, 0, 20)
                ToggleTitle.Font = Enum.Font.GothamSemibold
                ToggleTitle.Text = toggletitle or "Toggle | Toggle Me !"
                ToggleTitle.TextColor3 = _G.ElementTextColor
                ToggleTitle.TextSize = 13.000
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleOut.Name = "ToggleOut"
                ToggleOut.Parent = ToggleHolder
                ToggleOut.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                ToggleOut.Position = UDim2.new(0, 180, 0, 4)
                ToggleOut.Size = UDim2.new(0, 30, 0, 12)
                ToggleOut.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                ToggleOut.ImageTransparency = 1.000
                
                ToggleOutUICorner.CornerRadius = UDim.new(0, 1000)
                ToggleOutUICorner.Name = "ToggleOutUICorner"
                ToggleOutUICorner.Parent = ToggleOut
                
                ToggleIn.Name = "ToggleIn"
                ToggleIn.Parent = ToggleOut
                ToggleIn.BackgroundColor3 = _G.ElementThemeColor
                ToggleIn.Position = UDim2.new(0, 0, 0, 0)
                ToggleIn.Size = UDim2.new(0, 12, 0, 12)
                ToggleIn.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                ToggleIn.ImageTransparency = 1.000
                
                ToggleInUICorner.CornerRadius = UDim.new(0, 1000)
                ToggleInUICorner.Name = "ToggleInUICorner"
                ToggleInUICorner.Parent = ToggleIn
                
                ToggleHolderButton.Name = "ToggleHolderButton"
                ToggleHolderButton.Parent = ToggleHolder
                ToggleHolderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleHolderButton.BackgroundTransparency = 1.000
                ToggleHolderButton.BorderSizePixel = 0
                ToggleHolderButton.Size = UDim2.new(0, 220, 0, 20)
                ToggleHolderButton.ZIndex = 2
                ToggleHolderButton.Font = Enum.Font.SourceSans
                ToggleHolderButton.Text = ""
                ToggleHolderButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleHolderButton.TextSize = 14.000

                ToggleHolderUIStroke.Name = "ToggleHolderUIStroke"
                ToggleHolderUIStroke.Parent = ToggleHolder
                ToggleHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                ToggleHolderUIStroke.Color = _G.ElementThemeColor
                ToggleHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                ToggleHolderUIStroke.Thickness = 1
                ToggleHolderUIStroke.Transparency = 0
                ToggleHolderUIStroke.Enabled = true
                ToggleHolderUIStroke.Archivable = true
                
                local toggled = false
                ToggleHolderButton.MouseEnter:Connect(function()
                    TweenService:Create(ToggleTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(ToggleHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                    
                end)
                ToggleHolderButton.MouseLeave:Connect(function()
                    TweenService:Create(ToggleTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(ToggleHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                end)
                
                ToggleHolderButton.MouseButton1Click:Connect(function()
                    if toggled then
                        TweenService:Create(ToggleIn, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 0)}):Play()
                        TweenService:Create(ToggleOut, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)}):Play()
                        toggled = false
                        pcall(function()
                            togglecallback(toggled)
                        end)
                    else
                        TweenService:Create(ToggleIn, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 20, 0, 0)}):Play()
                        TweenService:Create(ToggleOut, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {BackgroundColor3 = Color3.fromRGB(0, 130, 250)}):Play()
                        toggled = true
                        pcall(function()
                            togglecallback(toggled)
                        end)
                    end
                end)
            end
            
            function Menu:Slider(slidertitle, minvalue, maxvalue, callback)
                local SliderHolder = Instance.new("Frame")
                local SliderHolderUICorner = Instance.new("UICorner")
                local SliderImage = Instance.new("ImageLabel")
                local SliderHolderTitle = Instance.new("TextLabel")
                local SliderButton = Instance.new("ImageButton")
                local SliderButtonUICorner = Instance.new("UICorner")
                local SliderIn = Instance.new("ImageLabel")
                local SliderInUICorner = Instance.new("UICorner")
                local Val = Instance.new("TextLabel")
                local SliderHolderUIStroke = Instance.new("UIStroke")
                
                SliderHolder.Name = slidertitle or "SliderHolder"
                SliderHolder.Parent = SectionLeft or SectionRight
                SliderHolder.BackgroundColor3 = _G.WindowBackgroundColor
                SliderHolder.BorderSizePixel = 0
                SliderHolder.Size = UDim2.new(0, 220, 0, 40)
                
                SliderHolderUICorner.CornerRadius = UDim.new(0, 1)
                SliderHolderUICorner.Name = "SliderHolderUICorner"
                SliderHolderUICorner.Parent = SliderHolder
                
                SliderImage.Name = "SliderImage"
                SliderImage.Parent = SliderHolder
                SliderImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderImage.BackgroundTransparency = 1.000
                SliderImage.BorderSizePixel = 0
                SliderImage.Position = UDim2.new(0, 5, 0, 3)
                SliderImage.Size = UDim2.new(0, 14, 0, 14)
                SliderImage.Image = "rbxassetid://7839722369"
                SliderImage.ImageColor3 = _G.ElementTextColor
                
                SliderHolderTitle.Name = "SliderHolderTitle"
                SliderHolderTitle.Parent = SliderHolder
                SliderHolderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderHolderTitle.BackgroundTransparency = 1.000
                SliderHolderTitle.BorderSizePixel = 0
                SliderHolderTitle.Position = UDim2.new(0, 22, 0, 0)
                SliderHolderTitle.Size = UDim2.new(0, 150, 0, 20)
                SliderHolderTitle.Font = Enum.Font.GothamSemibold
                SliderHolderTitle.Text = slidertitle or "Slider | Hold Me !"
                SliderHolderTitle.TextColor3 = _G.ElementTextColor
                SliderHolderTitle.TextSize = 13.000
                SliderHolderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderButton.Name = "SliderButton"
                SliderButton.Parent = SliderHolder
                SliderButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                SliderButton.Position = UDim2.new(0, 10, 0, 25)
                SliderButton.Size = UDim2.new(0, 200, 0, 7)
                SliderButton.AutoButtonColor = false
                SliderButton.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                SliderButton.ImageTransparency = 1.000
                
                SliderButtonUICorner.CornerRadius = UDim.new(0, 1000)
                SliderButtonUICorner.Name = "SliderButtonUICorner"
                SliderButtonUICorner.Parent = SliderButton
                
                SliderIn.Name = "SliderIn"
                SliderIn.Parent = SliderButton
                SliderIn.BackgroundColor3 = Color3.fromRGB(0, 130, 250)
                SliderIn.Size = UDim2.new(0, 0, 0, 7)
                SliderIn.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                SliderIn.ImageTransparency = 1.000
                
                SliderInUICorner.CornerRadius = UDim.new(0, 1000)
                SliderInUICorner.Name = "SliderInUICorner"
                SliderInUICorner.Parent = SliderIn
                
                Val.Name = "Val"
                Val.Parent = SliderHolder
                Val.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Val.BackgroundTransparency = 1.000
                Val.BorderSizePixel = 0
                Val.Position = UDim2.new(0, 150, 0, 0)
                Val.Size = UDim2.new(0, 60, 0, 20)
                Val.Font = Enum.Font.GothamSemibold
                Val.Text = minvalue or "0"
                Val.TextColor3 = _G.ElementTextColor
                Val.TextSize = 13.000
                Val.TextXAlignment = Enum.TextXAlignment.Right
                
                SliderHolderUIStroke.Name = "SliderHolderUIStroke"
                SliderHolderUIStroke.Parent = SliderHolder
                SliderHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                SliderHolderUIStroke.Color = _G.ElementThemeColor
                SliderHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                SliderHolderUIStroke.Thickness = 1
                SliderHolderUIStroke.Transparency = 0
                SliderHolderUIStroke.Enabled = true
                SliderHolderUIStroke.Archivable = true

                minvalue = minvalue or 0
                maxvalue = maxvalue or 100
                
                callback = callback or function() end
                
                -----Variables-----
                local mouse = game.Players.LocalPlayer:GetMouse()
                local uis = game:GetService("UserInputService")
                local Value;
                -----Main Code-----
                
                SliderButton.MouseButton1Down:Connect(function()
                    Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue)) or 0
                    pcall(function()
                        callback(Value)
                    end)
                    SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                    moveconnection = mouse.Move:Connect(function()
                        Val.Text = Value
                        Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue))
                        pcall(function()
                            callback(Value)
                        end)
                        SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                    end)
                    releaseconnection = uis.InputEnded:Connect(function(Mouse)
                        if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
                            Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue))
                            pcall(function()
                                callback(Value)
                            end)
                            SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                            moveconnection:Disconnect()
                            releaseconnection:Disconnect()
                        end
                    end)
                end)
            end
            
            function Menu:Dropdown(dropdowntitle, list, dropdowncallback)
                list = list or {}
                local DropdownHolder = Instance.new("Frame")
                local DropdownHolderUICorner = Instance.new("UICorner")
                local DropdownHolderTitle = Instance.new("TextLabel")
                local DropdownButton = Instance.new("ImageLabel")
                local DropdownIn = Instance.new("Frame")
                local DropdownInList = Instance.new("UIListLayout")
                local DropdownSelectedTitle = Instance.new("TextLabel")
                local DropdownHolderUIStroke = Instance.new("UIStroke")
                local GoNext = Instance.new("TextButton")
                
                --Properties:
                
                DropdownHolder.Name = dropdowntitle or "DropdownHolder"
                DropdownHolder.Parent = SectionLeft or SectionRight
                DropdownHolder.BackgroundColor3 = _G.WindowBackgroundColor
                DropdownHolder.BorderSizePixel = 0
                DropdownHolder.ClipsDescendants = true
                DropdownHolder.Size = UDim2.new(0, 220, 0, 45)
                
                DropdownHolderUICorner.CornerRadius = UDim.new(0, 1)
                DropdownHolderUICorner.Name = "DropdownHolderUICorner"
                DropdownHolderUICorner.Parent = DropdownHolder
                
                DropdownHolderTitle.Name = "DropdownHolderTitle"
                DropdownHolderTitle.Parent = DropdownHolder
                DropdownHolderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownHolderTitle.BackgroundTransparency = 1.000
                DropdownHolderTitle.BorderSizePixel = 0
                DropdownHolderTitle.Position = UDim2.new(0, 5, 0, 0)
                DropdownHolderTitle.Size = UDim2.new(0, 150, 0, 20)
                DropdownHolderTitle.Font = Enum.Font.GothamSemibold
                DropdownHolderTitle.Text = dropdowntitle or "Dropdown | Drop Me !"
                DropdownHolderTitle.TextColor3 = _G.ElementTextColor
                DropdownHolderTitle.TextSize = 13.000
                DropdownHolderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                GoNext.Name = "GoNext"
                GoNext.Parent = DropdownHolder
                GoNext.BackgroundColor3 = _G.ElementThemeColor
                GoNext.BackgroundTransparency = 1.000
                GoNext.Size = UDim2.new(0, 220, 0, 45)
                GoNext.Position = UDim2.new(0, 0, 0, 0)
                GoNext.Font = Enum.Font.GothamSemibold
                GoNext.Text = ""
                GoNext.TextColor3 = _G.ElementTextColor
                GoNext.TextSize = 13.000
                
                DropdownButton.Name = "DropdownButton"
                DropdownButton.Parent = DropdownHolder
                DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.BackgroundTransparency = 1.000
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Size = UDim2.new(0, 20, 0, 16)
                DropdownButton.ZIndex = 2
                DropdownButton.Position = UDim2.new(0, 196, 0, 3)
                DropdownButton.Image = "rbxassetid://8530745436"
                DropdownButton.ImageColor3 = _G.ElementTextColor
                
                DropdownIn.Name = "DropdownIn"
                DropdownIn.Parent = DropdownSelectedTitle
                DropdownIn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownIn.BackgroundTransparency = 0
                DropdownIn.BorderSizePixel = 0
                DropdownIn.Position = UDim2.new(0, 0, 0, 25)
                DropdownIn.Size = UDim2.new(0, 220, 0, 0)
                
                DropdownInList.Name = "DropdownInList"
                DropdownInList.Parent = DropdownIn
                DropdownInList.SortOrder = Enum.SortOrder.LayoutOrder
                
                DropdownSelectedTitle.Name = "DropdownSelectedTitle"
                DropdownSelectedTitle.Parent = DropdownHolder
                DropdownSelectedTitle.BackgroundColor3 = _G.ElementThemeColor
                DropdownSelectedTitle.BackgroundTransparency = 1.000
                DropdownSelectedTitle.BorderSizePixel = 0
                DropdownSelectedTitle.Position = UDim2.new(0, 5, 0, 20)
                DropdownSelectedTitle.Size = UDim2.new(0, 220, 0, 20)
                DropdownSelectedTitle.Font = Enum.Font.GothamSemibold
                DropdownSelectedTitle.Text = "[ .... ]"
                DropdownSelectedTitle.TextColor3 = _G.ElementTextColor
                DropdownSelectedTitle.TextSize = 12.000
                DropdownSelectedTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownHolderUIStroke.Name = "DropdownHolderUIStroke"
                DropdownHolderUIStroke.Parent = DropdownHolder
                DropdownHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                DropdownHolderUIStroke.Color = _G.ElementThemeColor
                DropdownHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                DropdownHolderUIStroke.Thickness = 1
                DropdownHolderUIStroke.Transparency = 0
                DropdownHolderUIStroke.Enabled = true
                DropdownHolderUIStroke.Archivable = true
                
                GoNext.MouseEnter:Connect(function()
                    TweenService:Create(DropdownHolderTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(DropdownHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                                        
                end)
                GoNext.MouseLeave:Connect(function()
                    TweenService:Create(DropdownHolderTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(DropdownHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                end)
                
                local toggled = false
                GoNext.MouseButton1Click:Connect(function()
                    if toggled then
                    DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                    else
                        DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45 + DropdownInList.AbsoluteContentSize.Y), "InOut", "Quad", 0.08, true)
                    end
                    toggled = not toggled
                end)

                for listindex, listvalue in next, list do
                    local ListButton = Instance.new("TextButton")

                    --Properties:
                    
                    ListButton.Name = listvalue or "ListButton"
                    ListButton.Parent = DropdownIn
                    ListButton.BackgroundColor3 = _G.ElementThemeColor
                    ListButton.BorderSizePixel = 0
                    ListButton.BackgroundTransparency = 1.000
                    ListButton.Size = UDim2.new(0, 220, 0, 20)
                    ListButton.Position = UDim2.new(0, 5, 0, 0)
                    ListButton.AutoButtonColor = false
                    ListButton.Font = Enum.Font.GothamSemibold
                    ListButton.Text = listvalue or "List"
                    ListButton.TextColor3 = _G.ElementTextColor
                    ListButton.TextSize = 13.000
                    ListButton.TextXAlignment = Enum.TextXAlignment.Left
                    ListButton.MouseButton1Click:Connect(function()
                        DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                        
                        DropdownSelectedTitle.Text = "[ ".. ListButton.Text.." ]"
                        pcall(function()
                            dropdowncallback(ListButton.Text)
                        end)
                    end)
                    
                end
                
                local Dropdown = {}

                function Dropdown:RefreshDropdown(newlist)
                    newlist = newlist or {}
                    for _, alllist in pairs(DropdownIn:GetChildren()) do
                        if alllist:IsA("TextButton") then
                            alllist:Destroy()
                        end
                    end

                    for newlistindex, newlistvalue in next, newlist do
                        local ListButton = Instance.new("TextButton")

                        --Properties:
                        
                        ListButton.Name = newlistvalue or "ListButton"
                        ListButton.Parent = DropdownIn
                        ListButton.BackgroundColor3 = _G.ElementThemeColor
                        ListButton.BackgroundTransparency = 1.000
                        ListButton.BorderSizePixel = 0
                        ListButton.Size = UDim2.new(0, 220, 0, 20)
                        ListButton.AutoButtonColor = false
                        ListButton.Font = Enum.Font.GothamSemibold
                        ListButton.Text = newlistvalue or "List"
                        ListButton.TextColor3 = _G.ElementTextColor
                        ListButton.TextSize = 14.000
    
                        ListButton.MouseButton1Click:Connect(function()
                            DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                            
                            DropdownSelectedTitle.Text = "[ "..ListButton.Text.." ]"
                            pcall(function()
                                dropdowncallback(ListButton.Text)
                            end)
                        end)
                    end
                end
                return Dropdown
            end
            
            function Menu:Label(labeltitle)
                local labelfunc = {}
                local LabelFrame = Instance.new("Frame")
                local LabelText = Instance.new("TextLabel")
                
                LabelFrame.Name = "LabelFrame"
                LabelFrame.Parent = SectionLeft or SectionRight
                LabelFrame.BackgroundColor3 = _G.ElementThemeColor
                LabelFrame.BackgroundTransparency = 1.000
                LabelFrame.Size = UDim2.new(0, 220, 0, 10)
 
                LabelText.Name = "LabelText"
                LabelText.Parent = LabelFrame
                LabelText.BackgroundTransparency = 1.000
                LabelText.BackgroundColor3 = _G.ElementThemeColor
                LabelText.Size = UDim2.new(0, 220, 0, 10)
                LabelText.Position = UDim2.new(0, 0, 0, 0)
                LabelText.Font = Enum.Font.GothamSemibold
                LabelText.Text = labeltitle
                LabelText.TextSize = 12.000
                LabelText.TextColor3 = _G.TitleTextColor
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                
                function labelfunc:Refresh(tochannge)
                    LabelText.Text = tochannge
                end
                return labelfunc
            end
            return Menu
        end

        function Section:Right()
            local Section = Instance.new("Frame")
            local SectionRight = Instance.new("Frame")
            local SectionRightUICorner = Instance.new("UICorner")
            local SectionRightList = Instance.new("UIListLayout")
            
            Section.Name = sectiontitle or "Section"
            Section.Parent = ContainerRight
            Section.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            Section.BackgroundTransparency = 1.000
            Section.Size = UDim2.new(0, 240, 0, 20)
            
            SectionRight.Name = "SectionRight"
            SectionRight.Parent = Section
            SectionRight.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            SectionRight.BackgroundTransparency = 1.000
            SectionRight.BorderSizePixel = 0
            SectionRight.Position = UDim2.new(0, 0, 0, 5)
            SectionRight.Size = UDim2.new(0, 240, 0, 70)
            
            SectionRightUICorner.CornerRadius = UDim.new(0, 5)
            SectionRightUICorner.Name = "SectionRightUICorner"
            SectionRightUICorner.Parent = SectionRight
            
            SectionRightList.Name = "SectionRightList"
            SectionRightList.Parent = SectionRight
            SectionRightList.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionRightList.SortOrder = Enum.SortOrder.LayoutOrder
            SectionRightList.Padding = UDim.new(0, 10)
            
            SectionRight.Size = UDim2.new(0, 240, 0, 5 + SectionRightList.AbsoluteContentSize.Y + SectionRightList.Padding.Offset)
            SectionRightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionRight.Size = UDim2.new(0, 240, 0, 5 + SectionRightList.AbsoluteContentSize.Y + SectionRightList.Padding.Offset)
            end)
            
            local function ContainerRightSizeChange()
                local largestRightListSize = 0
				largestRightListSize = SectionRightList.AbsoluteContentSize.Y
				
				ContainerRight.CanvasSize = UDim2.new(0, 0, 0, largestRightListSize + 35 + SectionRightList.Padding.Offset)
			end
            local function sectionrightsizechange()
				SectionRight.Size = UDim2.new(0, 240, 0, 20 + SectionRightList.AbsoluteContentSize.Y + SectionRightList.Padding.Offset)
			end
            ContainerRightSizeChange()
            sectionrightsizechange()

            SectionRightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                ContainerRightSizeChange()
                sectionrightsizechange()
            end)

            local Menu = {}
            function Menu:Button(buttontitle, buttoncallback)
                local ButtonHolder = Instance.new("TextButton")
                local ButtonHolderUICorner = Instance.new("UICorner")
                local ButtonHolderUIStroke = Instance.new("UIStroke")
                
                ButtonHolder.Name = buttontitle or "ButtonHolder"
                ButtonHolder.Parent = SectionLeft or SectionRight
                ButtonHolder.BackgroundColor3 = _G.ElementThemeColor
                ButtonHolder.BackgroundTransparency = 1.000
                ButtonHolder.BorderSizePixel = 0
                ButtonHolder.Position = UDim2.new(0, 0, 0, 5)
                ButtonHolder.Size = UDim2.new(0, 220, 0, 20)
                ButtonHolder.AutoButtonColor = false
                ButtonHolder.Font = Enum.Font.GothamSemibold
                ButtonHolder.Text = buttontitle or "Button | Click Me"
                ButtonHolder.TextColor3 = _G.ElementTextColor
                ButtonHolder.TextSize = 13.000
                
                ButtonHolderUICorner.CornerRadius = UDim.new(0, 1)
                ButtonHolderUICorner.Name = "ButtonHolderUICorner"
                ButtonHolderUICorner.Parent = ButtonHolder
                
                ButtonHolderUIStroke.Name = "ButtonHolderUIStroke"
                ButtonHolderUIStroke.Parent = ButtonHolder
                ButtonHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                ButtonHolderUIStroke.Color = _G.ElementThemeColor
                ButtonHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                ButtonHolderUIStroke.Thickness = 1
                ButtonHolderUIStroke.Transparency = 0
                ButtonHolderUIStroke.Enabled = true
                ButtonHolderUIStroke.Archivable = true
                
                ButtonHolder.MouseEnter:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(ButtonHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                    
                end)
                ButtonHolder.MouseLeave:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(ButtonHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 220, 0, 20)}):Play()
                end)
                ButtonHolder.MouseButton1Down:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 200, 0, 15)}):Play()
                end)
                ButtonHolder.MouseButton1Up:Connect(function()
                    TweenService:Create(ButtonHolder, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 220, 0, 20)}):Play()
                end)
                ButtonHolder.MouseButton1Click:Connect(function()
                    pcall(function()
                        buttoncallback()
                    end)
                end)
            end
            
            function Menu:Toggle(toggletitle, togglecallback)
                local ToggleHolder = Instance.new("Frame")
                local ToggleHolderUICorner = Instance.new("UICorner")
                local ToggleTitle = Instance.new("TextLabel")
                local ToggleOut = Instance.new("ImageLabel")
                local ToggleOutUICorner = Instance.new("UICorner")
                local ToggleIn = Instance.new("ImageLabel")
                local ToggleInUICorner = Instance.new("UICorner")
                local ToggleHolderButton = Instance.new("TextButton")
                local ToggleHolderUIStroke = Instance.new("UIStroke")
                
                ToggleHolder.Name = toggletitle or "ToggleHolder"
                ToggleHolder.Parent = SectionLeft or SectionRight
                ToggleHolder.BackgroundColor3 = _G.WindowBackgroundColor
                ToggleHolder.BorderSizePixel = 0
                ToggleHolder.Size = UDim2.new(0, 220, 0, 20)
                
                ToggleHolderUICorner.CornerRadius = UDim.new(0, 1)
                ToggleHolderUICorner.Name = "ToggleHolderUICorner"
                ToggleHolderUICorner.Parent = ToggleHolder
                
                ToggleTitle.Name = "ToggleTitle"
                ToggleTitle.Parent = ToggleHolder
                ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleTitle.BackgroundTransparency = 1.000
                ToggleTitle.BorderSizePixel = 0
                ToggleTitle.Position = UDim2.new(0, 5, 0, 0)
                ToggleTitle.Size = UDim2.new(0, 220, 0, 20)
                ToggleTitle.Font = Enum.Font.GothamSemibold
                ToggleTitle.Text = toggletitle or "Toggle | Toggle Me !"
                ToggleTitle.TextColor3 = _G.ElementTextColor
                ToggleTitle.TextSize = 13.000
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleOut.Name = "ToggleOut"
                ToggleOut.Parent = ToggleHolder
                ToggleOut.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                ToggleOut.Position = UDim2.new(0, 180, 0, 4)
                ToggleOut.Size = UDim2.new(0, 30, 0, 12)
                ToggleOut.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                ToggleOut.ImageTransparency = 1.000
                
                ToggleOutUICorner.CornerRadius = UDim.new(0, 1000)
                ToggleOutUICorner.Name = "ToggleOutUICorner"
                ToggleOutUICorner.Parent = ToggleOut
                
                ToggleIn.Name = "ToggleIn"
                ToggleIn.Parent = ToggleOut
                ToggleIn.BackgroundColor3 = _G.ElementThemeColor
                ToggleIn.Position = UDim2.new(0, 0, 0, 0)
                ToggleIn.Size = UDim2.new(0, 12, 0, 12)
                ToggleIn.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                ToggleIn.ImageTransparency = 1.000
                
                ToggleInUICorner.CornerRadius = UDim.new(0, 1000)
                ToggleInUICorner.Name = "ToggleInUICorner"
                ToggleInUICorner.Parent = ToggleIn
                
                ToggleHolderButton.Name = "ToggleHolderButton"
                ToggleHolderButton.Parent = ToggleHolder
                ToggleHolderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleHolderButton.BackgroundTransparency = 1.000
                ToggleHolderButton.BorderSizePixel = 0
                ToggleHolderButton.Size = UDim2.new(0, 220, 0, 20)
                ToggleHolderButton.ZIndex = 2
                ToggleHolderButton.Font = Enum.Font.SourceSans
                ToggleHolderButton.Text = ""
                ToggleHolderButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleHolderButton.TextSize = 14.000

                ToggleHolderUIStroke.Name = "ToggleHolderUIStroke"
                ToggleHolderUIStroke.Parent = ToggleHolder
                ToggleHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                ToggleHolderUIStroke.Color = _G.ElementThemeColor
                ToggleHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                ToggleHolderUIStroke.Thickness = 1
                ToggleHolderUIStroke.Transparency = 0
                ToggleHolderUIStroke.Enabled = true
                ToggleHolderUIStroke.Archivable = true
                
                local toggled = false
                ToggleHolderButton.MouseEnter:Connect(function()
                    TweenService:Create(ToggleTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(ToggleHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                    
                end)
                ToggleHolderButton.MouseLeave:Connect(function()
                    TweenService:Create(ToggleTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(ToggleHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                end)
                
                ToggleHolderButton.MouseButton1Click:Connect(function()
                    if toggled then
                        TweenService:Create(ToggleIn, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 0, 0, 0)}):Play()
                        TweenService:Create(ToggleOut, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)}):Play()
                        toggled = false
                        pcall(function()
                            togglecallback(toggled)
                        end)
                    else
                        TweenService:Create(ToggleIn, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 20, 0, 0)}):Play()
                        TweenService:Create(ToggleOut, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {BackgroundColor3 = Color3.fromRGB(0, 130, 250)}):Play()
                        toggled = true
                        pcall(function()
                            togglecallback(toggled)
                        end)
                    end
                end)
            end
            
            function Menu:Slider(slidertitle, minvalue, maxvalue, callback)
                local SliderHolder = Instance.new("Frame")
                local SliderHolderUICorner = Instance.new("UICorner")
                local SliderImage = Instance.new("ImageLabel")
                local SliderHolderTitle = Instance.new("TextLabel")
                local SliderButton = Instance.new("ImageButton")
                local SliderButtonUICorner = Instance.new("UICorner")
                local SliderIn = Instance.new("ImageLabel")
                local SliderInUICorner = Instance.new("UICorner")
                local Val = Instance.new("TextLabel")
                local SliderHolderUIStroke = Instance.new("UIStroke")
                
                SliderHolder.Name = slidertitle or "SliderHolder"
                SliderHolder.Parent = SectionLeft or SectionRight
                SliderHolder.BackgroundColor3 = _G.WindowBackgroundColor
                SliderHolder.BorderSizePixel = 0
                SliderHolder.Size = UDim2.new(0, 220, 0, 40)
                
                SliderHolderUICorner.CornerRadius = UDim.new(0, 1)
                SliderHolderUICorner.Name = "SliderHolderUICorner"
                SliderHolderUICorner.Parent = SliderHolder
                
                SliderImage.Name = "SliderImage"
                SliderImage.Parent = SliderHolder
                SliderImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderImage.BackgroundTransparency = 1.000
                SliderImage.BorderSizePixel = 0
                SliderImage.Position = UDim2.new(0, 5, 0, 3)
                SliderImage.Size = UDim2.new(0, 14, 0, 14)
                SliderImage.Image = "rbxassetid://7839722369"
                SliderImage.ImageColor3 = _G.ElementTextColor
                
                SliderHolderTitle.Name = "SliderHolderTitle"
                SliderHolderTitle.Parent = SliderHolder
                SliderHolderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderHolderTitle.BackgroundTransparency = 1.000
                SliderHolderTitle.BorderSizePixel = 0
                SliderHolderTitle.Position = UDim2.new(0, 22, 0, 0)
                SliderHolderTitle.Size = UDim2.new(0, 150, 0, 20)
                SliderHolderTitle.Font = Enum.Font.GothamSemibold
                SliderHolderTitle.Text = slidertitle or "Slider | Hold Me !"
                SliderHolderTitle.TextColor3 = _G.ElementTextColor
                SliderHolderTitle.TextSize = 13.000
                SliderHolderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderButton.Name = "SliderButton"
                SliderButton.Parent = SliderHolder
                SliderButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                SliderButton.Position = UDim2.new(0, 10, 0, 25)
                SliderButton.Size = UDim2.new(0, 200, 0, 7)
                SliderButton.AutoButtonColor = false
                SliderButton.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                SliderButton.ImageTransparency = 1.000
                
                SliderButtonUICorner.CornerRadius = UDim.new(0, 1000)
                SliderButtonUICorner.Name = "SliderButtonUICorner"
                SliderButtonUICorner.Parent = SliderButton
                
                SliderIn.Name = "SliderIn"
                SliderIn.Parent = SliderButton
                SliderIn.BackgroundColor3 = Color3.fromRGB(0, 130, 250)
                SliderIn.Size = UDim2.new(0, 0, 0, 7)
                SliderIn.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                SliderIn.ImageTransparency = 1.000
                
                SliderInUICorner.CornerRadius = UDim.new(0, 1000)
                SliderInUICorner.Name = "SliderInUICorner"
                SliderInUICorner.Parent = SliderIn
                
                Val.Name = "Val"
                Val.Parent = SliderHolder
                Val.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Val.BackgroundTransparency = 1.000
                Val.BorderSizePixel = 0
                Val.Position = UDim2.new(0, 150, 0, 0)
                Val.Size = UDim2.new(0, 60, 0, 20)
                Val.Font = Enum.Font.GothamSemibold
                Val.Text = minvalue or "0"
                Val.TextColor3 = _G.ElementTextColor
                Val.TextSize = 13.000
                Val.TextXAlignment = Enum.TextXAlignment.Right
                
                SliderHolderUIStroke.Name = "SliderHolderUIStroke"
                SliderHolderUIStroke.Parent = SliderHolder
                SliderHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                SliderHolderUIStroke.Color = _G.ElementThemeColor
                SliderHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                SliderHolderUIStroke.Thickness = 1
                SliderHolderUIStroke.Transparency = 0
                SliderHolderUIStroke.Enabled = true
                SliderHolderUIStroke.Archivable = true

                minvalue = minvalue or 0
                maxvalue = maxvalue or 100
                
                callback = callback or function() end
                
                -----Variables-----
                local mouse = game.Players.LocalPlayer:GetMouse()
                local uis = game:GetService("UserInputService")
                local Value;
                -----Main Code-----
                
                SliderButton.MouseButton1Down:Connect(function()
                    Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue)) or 0
                    pcall(function()
                        callback(Value)
                    end)
                    SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                    moveconnection = mouse.Move:Connect(function()
                        Val.Text = Value
                        Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue))
                        pcall(function()
                            callback(Value)
                        end)
                        SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                    end)
                    releaseconnection = uis.InputEnded:Connect(function(Mouse)
                        if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
                            Value = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 200) * SliderIn.AbsoluteSize.X) + tonumber(minvalue))
                            pcall(function()
                                callback(Value)
                            end)
                            SliderIn.Size = UDim2.new(0, math.clamp(mouse.X - SliderIn.AbsolutePosition.X, 0, 200), 0, 7)
                            moveconnection:Disconnect()
                            releaseconnection:Disconnect()
                        end
                    end)
                end)
            end
            
            function Menu:Dropdown(dropdowntitle, list, dropdowncallback)
                list = list or {}
                local DropdownHolder = Instance.new("Frame")
                local DropdownHolderUICorner = Instance.new("UICorner")
                local DropdownHolderTitle = Instance.new("TextLabel")
                local DropdownButton = Instance.new("ImageLabel")
                local DropdownIn = Instance.new("Frame")
                local DropdownInList = Instance.new("UIListLayout")
                local DropdownSelectedTitle = Instance.new("TextLabel")
                local DropdownHolderUIStroke = Instance.new("UIStroke")
                local GoNext = Instance.new("TextButton")
                
                --Properties:
                
                DropdownHolder.Name = dropdowntitle or "DropdownHolder"
                DropdownHolder.Parent = SectionLeft or SectionRight
                DropdownHolder.BackgroundColor3 = _G.WindowBackgroundColor
                DropdownHolder.BorderSizePixel = 0
                DropdownHolder.ClipsDescendants = true
                DropdownHolder.Size = UDim2.new(0, 220, 0, 45)
                
                DropdownHolderUICorner.CornerRadius = UDim.new(0, 1)
                DropdownHolderUICorner.Name = "DropdownHolderUICorner"
                DropdownHolderUICorner.Parent = DropdownHolder
                
                DropdownHolderTitle.Name = "DropdownHolderTitle"
                DropdownHolderTitle.Parent = DropdownHolder
                DropdownHolderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownHolderTitle.BackgroundTransparency = 1.000
                DropdownHolderTitle.BorderSizePixel = 0
                DropdownHolderTitle.Position = UDim2.new(0, 5, 0, 0)
                DropdownHolderTitle.Size = UDim2.new(0, 150, 0, 20)
                DropdownHolderTitle.Font = Enum.Font.GothamSemibold
                DropdownHolderTitle.Text = dropdowntitle or "Dropdown | Drop Me !"
                DropdownHolderTitle.TextColor3 = _G.ElementTextColor
                DropdownHolderTitle.TextSize = 13.000
                DropdownHolderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                GoNext.Name = "GoNext"
                GoNext.Parent = DropdownHolder
                GoNext.BackgroundColor3 = _G.ElementThemeColor
                GoNext.BackgroundTransparency = 1.000
                GoNext.Size = UDim2.new(0, 220, 0, 45)
                GoNext.Position = UDim2.new(0, 0, 0, 0)
                GoNext.Font = Enum.Font.GothamSemibold
                GoNext.Text = ""
                GoNext.TextColor3 = _G.ElementTextColor
                GoNext.TextSize = 13.000
                
                DropdownButton.Name = "DropdownButton"
                DropdownButton.Parent = DropdownHolder
                DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.BackgroundTransparency = 1.000
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Size = UDim2.new(0, 20, 0, 16)
                DropdownButton.ZIndex = 2
                DropdownButton.Position = UDim2.new(0, 196, 0, 3)
                DropdownButton.Image = "rbxassetid://8530745436"
                DropdownButton.ImageColor3 = _G.ElementTextColor
                
                DropdownIn.Name = "DropdownIn"
                DropdownIn.Parent = DropdownSelectedTitle
                DropdownIn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownIn.BackgroundTransparency = 0
                DropdownIn.BorderSizePixel = 0
                DropdownIn.Position = UDim2.new(0, 0, 0, 25)
                DropdownIn.Size = UDim2.new(0, 220, 0, 0)
                
                DropdownInList.Name = "DropdownInList"
                DropdownInList.Parent = DropdownIn
                DropdownInList.SortOrder = Enum.SortOrder.LayoutOrder
                
                DropdownSelectedTitle.Name = "DropdownSelectedTitle"
                DropdownSelectedTitle.Parent = DropdownHolder
                DropdownSelectedTitle.BackgroundColor3 = _G.ElementThemeColor
                DropdownSelectedTitle.BackgroundTransparency = 1.000
                DropdownSelectedTitle.BorderSizePixel = 0
                DropdownSelectedTitle.Position = UDim2.new(0, 5, 0, 20)
                DropdownSelectedTitle.Size = UDim2.new(0, 220, 0, 20)
                DropdownSelectedTitle.Font = Enum.Font.GothamSemibold
                DropdownSelectedTitle.Text = "[ .... ]"
                DropdownSelectedTitle.TextColor3 = _G.ElementTextColor
                DropdownSelectedTitle.TextSize = 12.000
                DropdownSelectedTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownHolderUIStroke.Name = "DropdownHolderUIStroke"
                DropdownHolderUIStroke.Parent = DropdownHolder
                DropdownHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                DropdownHolderUIStroke.Color = _G.ElementThemeColor
                DropdownHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
                DropdownHolderUIStroke.Thickness = 1
                DropdownHolderUIStroke.Transparency = 0
                DropdownHolderUIStroke.Enabled = true
                DropdownHolderUIStroke.Archivable = true
                
                GoNext.MouseEnter:Connect(function()
                    TweenService:Create(DropdownHolderTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0.6}):Play()
                    TweenService:Create(DropdownHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0.6}):Play()
                                        
                end)
                GoNext.MouseLeave:Connect(function()
                    TweenService:Create(DropdownHolderTitle, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {TextTransparency = 0}):Play()
                    TweenService:Create(DropdownHolderUIStroke, TweenInfo.new(0.12, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Transparency = 0}):Play()
                    
                end)
                
                local toggled = false
                GoNext.MouseButton1Click:Connect(function()
                    if toggled then
                    DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                    else
                        DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45 + DropdownInList.AbsoluteContentSize.Y), "InOut", "Quad", 0.08, true)
                    end
                    toggled = not toggled
                end)

                for listindex, listvalue in next, list do
                    local ListButton = Instance.new("TextButton")

                    --Properties:
                    
                    ListButton.Name = listvalue or "ListButton"
                    ListButton.Parent = DropdownIn
                    ListButton.BackgroundColor3 = _G.ElementThemeColor
                    ListButton.BorderSizePixel = 0
                    ListButton.BackgroundTransparency = 1.000
                    ListButton.Size = UDim2.new(0, 220, 0, 20)
                    ListButton.Position = UDim2.new(0, 5, 0, 0)
                    ListButton.AutoButtonColor = false
                    ListButton.Font = Enum.Font.GothamSemibold
                    ListButton.Text = listvalue or "List"
                    ListButton.TextColor3 = _G.ElementTextColor
                    ListButton.TextSize = 13.000
                    ListButton.TextXAlignment = Enum.TextXAlignment.Left
                    ListButton.MouseButton1Click:Connect(function()
                        DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                        
                        DropdownSelectedTitle.Text = "[ ".. ListButton.Text.." ]"
                        pcall(function()
                            dropdowncallback(ListButton.Text)
                        end)
                    end)
                    
                end
                
                local Dropdown = {}

                function Dropdown:RefreshDropdown(newlist)
                    newlist = newlist or {}
                    for _, alllist in pairs(DropdownIn:GetChildren()) do
                        if alllist:IsA("TextButton") then
                            alllist:Destroy()
                        end
                    end

                    for newlistindex, newlistvalue in next, newlist do
                        local ListButton = Instance.new("TextButton")

                        --Properties:
                        
                        ListButton.Name = newlistvalue or "ListButton"
                        ListButton.Parent = DropdownIn
                        ListButton.BackgroundColor3 = _G.ElementThemeColor
                        ListButton.BackgroundTransparency = 1.000
                        ListButton.BorderSizePixel = 0
                        ListButton.Size = UDim2.new(0, 220, 0, 20)
                        ListButton.AutoButtonColor = false
                        ListButton.Font = Enum.Font.GothamSemibold
                        ListButton.Text = newlistvalue or "List"
                        ListButton.TextColor3 = _G.ElementTextColor
                        ListButton.TextSize = 14.000
    
                        ListButton.MouseButton1Click:Connect(function()
                            DropdownHolder:TweenSize(UDim2.new(0, 220, 0, 45), "InOut", "Quad", 0.08, true)
                            
                            DropdownSelectedTitle.Text = "[ "..ListButton.Text.." ]"
                            pcall(function()
                                dropdowncallback(ListButton.Text)
                            end)
                        end)
                    end
                end
                return Dropdown
            end
            
            function Menu:Label(labeltitle)
                local labelfunc = {}
                local LabelFrame = Instance.new("Frame")
                local LabelText = Instance.new("TextLabel")
                
                LabelFrame.Name = "LabelFrame"
                LabelFrame.Parent = SectionLeft or SectionRight
                LabelFrame.BackgroundColor3 = _G.ElementThemeColor
                LabelFrame.BackgroundTransparency = 1.000
                LabelFrame.Size = UDim2.new(0, 220, 0, 10)
 
                LabelText.Name = "LabelText"
                LabelText.Parent = LabelFrame
                LabelText.BackgroundTransparency = 1.000
                LabelText.BackgroundColor3 = _G.ElementThemeColor
                LabelText.Size = UDim2.new(0, 220, 0, 10)
                LabelText.Position = UDim2.new(0, 0, 0, 0)
                LabelText.Font = Enum.Font.GothamSemibold
                LabelText.Text = labeltitle
                LabelText.TextSize = 12.000
                LabelText.TextColor3 = _G.TitleTextColor
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                
                function labelfunc:Refresh(tochannge)
                    LabelText.Text = tochannge
                end
                return labelfunc
            end
            return Menu
        end
        return Section
    end
    return Tabs
end

local Win = SkyLib:Window("Pet Simulator X")
local Main = Win:Tab("Main")
local MnLeft = Main:Left()
local MnRight = Main:Right()
local Egg = Win:Tab("Auto-Egg")
local ELeft = Egg:Left()
local ERight = Egg:Right()
local Misc = Win:Tab("Misc")
local MsLeft = Misc:Left()
local MsRight = Misc:Right()
local Credit = Win:Tab("Credit")
local CrLeft = Credit:Left()
local CrRight = Credit:Right()

---Main---
local Network = game:GetService("ReplicatedStorage").Framework.Modules["2 | Network"]:GetChildren()
local Run_Service = game:GetService("RunService")
local rs = Run_Service.RenderStepped
local CurrencyOrder = {"Gingerbread", "Tech Coins", "Fantasy Coins", "Coins", "Diamonds",}
 
    local IMightKillMyselfCauseOfThis = {
        --Misc
        ['VIP'] = {'VIP'};
        --Spawn
        ['Town'] = {'Town', 'Town FRONT'}; ['Forest'] = {'Forest', 'Forest FRONT'}; ['Beach'] = {'Beach', 'Beach FRONT'}; ['Mine'] = {'Mine', 'Mine FRONT'}; ['Winter'] = {'Winter', 'Winter FRONT'}; ['Glacier'] = {'Glacier', 'Glacier Lake'}; ['Desert'] = {'Desert', 'Desert FRONT'}; ['Volcano'] = {'Volcano', 'Volcano FRONT'};
        -- Fantasy init
        ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'}; ['Ancient'] = {'Ancient'}; ['Samurai'] = {'Samurai', 'Samurai FRONT'}; ['Candy'] = {'Candy'}; ['Haunted'] = {'Haunted', 'Haunted FRONT'}; ['Hell'] = {'Hell'}; ['Heaven'] = {'Heaven'};
        -- Tech
        ['Ice Tech'] = {'Ice Tech'}; ['Tech City'] = {'Tech City'; 'Tech City FRONT'}; ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'}; ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'}, ['Alien Forest'] = {"Alien Forest"; "Alien Forest FRONT"}, ['Alien Lab'] = {"Alien lab"; "Alien Lab FRONT"};
    }
 
    local AreaList = { --These match the IMightKillMyselfCuaseOfThis table
        'All'; 'VIP';
        'Town'; 'Forest'; 'Beach'; 'Mine'; 'Winter'; 'Glacier'; 'Desert'; 'Volcano';
        'Enchanted Forest'; 'Ancient'; 'Samurai'; 'Candy'; 'Haunted'; 'Hell'; 'Heaven';
        'Ice Tech'; 'Tech City'; 'Dark Tech'; 'Steampunk'; 'Alien Lab'; 'Alien Forest';
    }
 
    local Chests = {
"All";
        -- Spawn
        "Magma Chest",
        -- Fantasy
        "Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",
        -- Tech
        "Giant Tech Chest"; "Giant Steampunk Chest"; "Giant Alien Chest";
    }
    



local AreaWorldTable = {}
for _, v in pairs(game:GetService("ReplicatedStorage").Game.Coins:GetChildren()) do
    for _, b in pairs(v:GetChildren()) do
        table.insert(AreaWorldTable, b.Name)
    end
    table.insert(AreaWorldTable, v.Name)
end

function AllChests()
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        local shit = v
        shit["index"] = i
        for aa,bb in pairs(AreaWorldTable) do
            if string.find(v.n, bb) then
                local thing = string.gsub(v.n, bb.." ", "")
                if table.find(Chests, thing) then
                    shit.n = thing
                    table.insert(returntable, shit)
                end
            end
        end
    end
    return returntable
end
-------------------------------------------------------------------------------------------------
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "collect lootbag")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "get trade")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "add trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "remove trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem rank rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem vip rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "toggle setting")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "activate boost")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "travel to trading plaza")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "collect bank interest")

-------------------------------
function FarmCoin(CoinID, PetID)
    game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
    game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
end


local IDToName = {}
local NameToID = {}
for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets:GetChildren()) do
    IDToName[i] = v.name
    NameToID[v.name] = i
end

function GetMyPets()
    local returntable = {}
    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets:GetChildren()) do
        if v.ClassName == 'TextButton' and v.Equipped.Visible then
            table.insert(returntable, v.Name)
        end
    end
    return returntable
end

function GetPets()
        local MyPets = {}
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets:GetChildren()) do
            local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
            local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
            if MyPets[TempString] then
                    table.insert(MyPets[TempString], v.uid)
                else
                    MyPets[TempString] = {}
                    table.insert(MyPets[TempString], v.uid)
                end
            --end
        end
        return MyPets
end
            

function GetCoinsNormal(area)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if string.lower(v.a) == string.lower(area) then
            table.insert(returntable, i)
        end
    end
    return returntable
end

function GetCoins(area, exclude)
    exclude = exclude or {}
    local Areas = (IMightKillMyselfCauseOfThis)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if _G.FarmingArea == 'All' or table.find(Areas[_G.FarmingArea], v.a) and not table.find(exclude ,v.n) then
            local shit = v
            shit["index"] = i
            table.insert(returntable, shit)
         end
    end
    return returntable
end

function GetCoinTable(area, Type, exclude)
    exclude = exclude or {}
    local CoinTable = GetCoins(area, exclude)
    local function getKeysSortedByValue(tbl, sortFunction)
        local keys = {}
        for key in pairs(tbl) do
            table.insert(keys, key)
        end
        table.sort(
            keys,
            function(a, b)
                return sortFunction(tbl[a].h, tbl[b].h)
            end
        )
        return keys
    end
    local sortedKeys
    if Type == 'Highest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
    elseif Type == 'Lowest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a < b end)
    end
    local newCoinTable = {}

    for i,v in pairs(sortedKeys) do
        table.insert(newCoinTable, CoinTable[v])
    end

    return newCoinTable
end

function CollectOrbs()
    local ohTable1 = {[1] = {}}
    for i,v in pairs(game.workspace['__THINGS'].Orbs:GetChildren()) do
        ohTable1[1][i] = v.Name
    end
        game.workspace['__THINGS']['__REMOTES']["claim orbs"]:FireServer(ohTable1)
end

local TypeList = {'Normal', 'Multi Target Normal', 'Multi Target Faster', 'Lowest Value (Multi)', 'Highest Value', 'Highest Value (Multi)', 'Nearest'}


-------------------------------------------------------------------------------------------------
MnLeft:Label("Auto-Farm")
MnLeft:Dropdown("Area Farm", AreaList, function(areafunc)
    _G.FarmingArea = areafunc
end)
MnLeft:Dropdown("Type Farm", TypeList, function(typefunc)
    _G.FarmingType = typefunc
end)
MnLeft:Toggle("Enable Auto-Farm", function(autofarmfunc)
    if autofarmfunc == true then
        _G.FarmingEnable = true
    elseif autofarmfunc == false or destroygui then
        _G.FarmingEnable = false
    end
    local CurrentFarmingPets = {}
    while _G.FarmingEnable do
        local pethingy = GetMyPets()
        local cointhiny = nil
        if _G.FarmingType == 'Normal' then
                local cointhiny = GetCoins(_G.FarmingArea)
                for i = 1, #cointhiny do
                    if _G.FarmingEnable and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                        for _, bb in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(cointhiny[i].index, bb)
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or not _G.FarmingEnable or _G.FarmingType ~= 'Normal'
                    end
                end
        elseif _G.FarmingType == 'Multi Target Normal' then
            local cointhiny = GetCoinsNormal(_G.FarmingArea)
            for i = 1, #cointhiny do
                pcall(function() FarmCoin(cointhiny[i], pethingy[i%#pethingy+1]) end)
            end
        elseif _G.FarmingType == 'Multi Target Faster' then
                local cointhiny = GetCoins(_G.FarmingArea)
                for i = 1, #cointhiny do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        wait(0.1)
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingEnable or _G.FarmingType ~= 'Multi Target Faster'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end
        elseif _G.FarmingType == 'Lowest Value (Multi)' then
                local cointhiny = GetCoinTable(_G.FarmingArea, "Lowest")
                for i = 1, (#cointhiny >= #pethingy and #pethingy or #cointhiny) do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait(0.0001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingEnable or _G.FarmingType ~= 'Lowest Value (Multi)'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end
        elseif _G.FarmingType == 'Highest Value' then
                local cointhiny = GetCoinTable(_G.FarmingArea, "Highest")
                if #cointhiny >= 1 then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            FarmCoin(cointhiny[1].index, b) 
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0 or not _G.FarmingEnable or _G.FarmingType ~= 'Highest Value'
                else
                    task.wait()
                end
        elseif _G.FarmingType == 'Highest Value (Multi)' then
                local cointhiny = GetCoinTable(_G.FarmingArea, "Highest")
                if #cointhiny >= 3 then
                    local CurrentFarmingPets = {}
                    for a = 1, 3 do
                        coroutine.wrap(function()
                            if CurrentFarmingPets[a] == nil then
                                for petnum = a, #pethingy, 3 do
                                    coroutine.wrap(function()
                                        if not CurrentFarmingPets[a] then CurrentFarmingPets[a] = {} end
                                        if CurrentFarmingPets[a] ~= nil and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) and not table.find(CurrentFarmingPets[a], pethingy[petnum]) then
                                            table.insert(CurrentFarmingPets[a], pethingy[petnum])
                                            FarmCoin(cointhiny[a].index, pethingy[petnum]) 
                                        end
                                    end)()
                                end
                                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[a].index].Pets:GetChildren() == 0  or not _G.FarmingEnable or _G.FarmingType ~= 'Highest Value (Multi)'
                                CurrentFarmingPets[a] = nil
                            end
                        end)()
                    end
                else
                    task.wait()
                end
        elseif _G.FarmingType == 'Nearest' then
                local cointable = game:GetService("Workspace")["__THINGS"].Coins:GetChildren()
                table.sort(cointable, function(i, v)
                    return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - i.POS.Position).magnitude < (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.POS.Position).magnitude
                end)
                local NearestOne = cointable[1]
                if NearestOne ~= nil then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            if NearestOne ~= nil then
                                FarmCoin(NearestOne.Name, b)
                            end
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(NearestOne.Name) or #game:GetService("Workspace")["__THINGS"].Coins[NearestOne.Name].Pets:GetChildren() == 0
                else
                    task.wait()
                end
        end
    end
end)
MnRight:Label("Auto-Collect")
MnRight:Toggle("Auto Orbs", function(orbsfunc)
    _G.CollectOrb = orbsfunc
    while wait() and _G.CollectOrb do
        pcall(function() CollectOrbs() end)
    end
end)
MnRight:Toggle("Auto Lootbags", function(lootbagfunc)
    _G.Lootbag = lootbagfunc
    local Running = {}
    while wait() and _G.Lootbag do
        for i, v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren()) do
                spawn(function()
                    if v ~= nil and v.ClassName == 'MeshPart' then
                        if not Running[v.Name] then
                            Running[v.Name] = true
                            local StartTick = tick()
                            v.Material = "SmoothPlastic"
                            v.Transparency = 1
                            v.Reflectance = 0
                            for i2,v2 in pairs(v:GetChildren()) do
                                if not string.find(v2.Name, "Body") then
                                    v2:Destroy()
                                end
                            end
                            repeat task.wait()
                                v.CFrame = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
                            until v == nil or not v.Parent or tick() > StartTick + 1
                            Running[v.Name] = nil
                        end
                    end
                end)
            end
        end
end)
MnLeft:Label("Auto-Chest")
MnLeft:Dropdown("Select Chest", Chests, function(chestfunc)
    _G.FarmingSingleChest = chestfunc
end)
MnLeft:Toggle("Enable Auto-Chest", function(chestfarmfunc)
    _G.ChestFarm = chestfarmfunc
    local CurrentFarmingPets = {}
    while wait() and _G.ChestFarm do
        local pethingy = GetMyPets()
        local cointhiny = nil
        for i,v in pairs(AllChests()) do
            if (v.n == _G.FarmingSingleChest) or (_G.FarmingSingleChest == 'All') then
                local starttick = tick()
                for a, b in pairs(pethingy) do
                    coroutine.wrap(function()
                        FarmCoin(v.index, b)
                    end)()
                end
                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0 or not _G.FarmingEnable
                --warn(v.n .. " has been broken in", tick()-starttick)
            end
        end
    end
end)
MnRight:Label("Mini Farming")
MnRight:Toggle("Enable Mini-Farming", function(minifarmfunc)
    _G.MiniFarm = minifarmfunc
    while wait() and _G.MiniFarm do
        local dist = math.huge
		local target = nil
		for i,v1 in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets:GetChildren()) do
			for i,v in pairs(game:GetService("Workspace")["__THINGS"].Coins:GetChildren()) do
			    if v1.ClassName == "TextButton" then
					if v.ClassName == "Folder" then
						if v:FindFirstChild("Coin") then
							if v.Coin.Transparency == 0 then
								local magnitude = (v.Coin.Position - game:GetService("Players").LocalPlayer.Character.Head.Position).magnitude
							    if magnitude < dist then
						    		dist = magnitude
						    		target = v.Name
					    			workspace.__THINGS.__REMOTES["join coin"]:InvokeServer({tostring(target),{tostring(v1.Name)}})
						    		workspace.__THINGS.__REMOTES["farm coin"]:FireServer({tostring(target),tostring(v1.Name)})
							    end
							end
						end
					end
			    end
			end
		end
    end
end)

MnRight:Label("Adding Function")
MnRight:Toggle("Auto Triple Damage", function(autotripledamage)
if autotripledamage == true then
    _G.TripleDamage1 = true
elseif autotripledamage == false or destroygui then
    _G.TripleDamage1 = false
    end
while wait(5) do
  if _G.TripleDamage1 then 
    if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Damage") then
        workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Damage"})
    print("Triple damage boost checked")
    end
  end
end
end)
MnRight:Toggle("Auto Triple Coins", function(autotriplecoins)
if autotriplecoins == true then
    _G.TripleCoins1 = true
elseif autotriplecoins == false or destroygui then
    _G.TripleCoins1 = false
    end
while wait(5) do
    if _G.TripleCoins1 then
        if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Coins") then
            workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Coins"})
        print("Triple coin boost checked")
    end
  end
end
end)
MnRight:Button("Disable PopUps Billboards", function()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = true
    local a = game:GetService("Workspace")["__DEBRIS"]
    local b = a:Clone()
    b.Parent = a.Parent
    a:Destroy()
    for _,v in pairs(b:GetChildren()) do
        if v.Name == 'RewardBillboard' then
            v:Destroy()
        end
    end
    if game:GetService("Players").LocalPlayer.PlayerGui.Settings.Frame.Container.ShowOtherPets.Toggle.Label.Text == "Yes" then 
       workspace.__THINGS.__REMOTES["toggle setting"]:FireServer({[1] = "ShowOtherPets"})
    end
end)

---Egg---
ELeft:Label("Auto Open-Egg")
local EggData = {}
for i,v in next, game.ReplicatedStorage.Game.Eggs:GetChildren() do
    for i2,v2 in next, v:GetChildren() do
        if v2 then
            table.insert(EggData, v2.Name)
        end
    end
end
ELeft:Dropdown("Select Egg", EggData, function(eggdatafunc)
    _G.SelectedEgg = eggdatafunc
end)
ELeft:Toggle("Enable Open-Egg", function(openeggsfunc)
    _G.OpenEggs = openeggsfunc
    while wait() and _G.OpenEggs do
        local ohTable1 = {
            [1] = _G.SelectedEgg,
            [2] = _G.TripleEggs
        }
        workspace.__THINGS.__REMOTES["buy egg"]:InvokeServer(ohTable1)
    end
end)
ELeft:Label("Use 3x Hatch if have Gamepassed")
ELeft:Toggle("Triple Hatch", function(tripleeggsfunc)
    _G.TripleEggs = tripleeggsfunc
end)

ERight:Label("Adding Function")
ERight:Toggle("Auto Super Lucky", function(superluckyfunc)
    if superluckyfunc == true then
        _G.SuperLucky = true
    elseif superluckyfunc == false or destroygui then
        _G.SuperLucky = false
    end
    while wait(5) do
    if _G.SuperLucky then
        if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Super Lucky") then
            workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Super Lucky"})
        print("Super Lucky boost checked")
    end
  end
end
end)
ERight:Toggle("Auto Ultra Lucky", function(ultraluckyfunc)
    if ultraluckyfunc == true then
        _G.UltraLucky = true
    elseif ultraluckyfunc == false or destroygui then
        _G.UltraLucky = false
    end
    while wait(5) do
    if _G.UltraLucky then
        if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Ultra Lucky") then
            workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Ultra Lucky"})
        print("ULTRA Lucky boost checked")
    end
  end
end
end)
ERight:Button("Remove Egg Opening Animation", function()
    for i,v in pairs(getgc(true)) do
        if (typeof(v) == 'table' and rawget(v, 'OpenEgg')) then
            v.OpenEgg = function()
                return
            end
        end
    end
end)

---Misc---
MsLeft:Label("Remote's Function")
MsLeft:Toggle("Auto Rank/VIP Rewards", function(autorewards)
if autorewards == true then
    _G.AutoRewards1 = true
elseif autorewards == false then
    _G.AutoRewards1 = false
end
while task.wait() and _G.AutoRewards1 do
	workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
	workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})
end
end)
MsLeft:Button("Bank Storage", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled
end)
MsLeft:Button("Merchant", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled
end)
MsLeft:Button("Pet Collection", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled
end)
MsLeft:Button("Fuse Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled
end)
MsLeft:Button("Gold Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled
end)

MsLeft:Button("Rainbow Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled
end)
MsLeft:Button("Dark Matter Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled
end)
MsLeft:Button("Enchant Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled
end)

MsRight:Label("Config")
MsRight:Button("Visual Dupe Gems", function()
    function comma_value(amount)
    local formatted = amount
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		if (k == 0) then
		    break
	    end
	end
	return formatted
	end

	local diamonds = game.Players.LocalPlayer.PlayerGui.Main.Right.Diamonds.Amount
	local old = diamonds.Text
	local oldNumber = string.gsub(old, ",", "")
	local newNumber = oldNumber * 2
	local new = comma_value(newNumber)
	local newString = tostring(new)
	diamonds.Text = newString
end)
MsRight:Slider("Speed Hack", 50, 99, function(value)
    game:GetService('Players').LocalPlayer.Character.Humanoid.WalkSpeed = value
end)
MsRight:Slider("Fly Hack", 1, 99, function(value)
    game:GetService('Players').LocalPlayer.Character.Humanoid.HipHeight = value
end)
MsRight:Slider("Jump Hack", 100, 999, function(value)
    game:GetService('Players').LocalPlayer.Character.Humanoid.JumpPower = value
end)

---Credit---
local Quest5 = CrLeft:Label("CREDIT by SKYLAR")
spawn(function()
while task.wait() do
pcall(function()
Quest5:Refresh("")
wait(.1)
Quest5:Refresh("C")
wait(.1)
Quest5:Refresh("CR")
wait(.1)
Quest5:Refresh("CRE")
 wait(.1)
 Quest5:Refresh("CRED")
 wait(.1)
 Quest5:Refresh("CREDI")
 wait(.1)
 Quest5:Refresh("CREDIT")
 wait(.1)
 Quest5:Refresh("CREDITS")
 wait(.1)
 Quest5:Refresh("CREDITS ")
 wait(.1)
 Quest5:Refresh("CREDITS b")
 wait(.1)
 Quest5:Refresh("CREDITS by")
 wait(.1)
 Quest5:Refresh("CREDITS by ")
 wait(.1)
 Quest5:Refresh("CREDITS by S")
 wait(.1)
 Quest5:Refresh("CREDITS by SK")
 wait(.1)
 Quest5:Refresh("CREDITS by SKY")
 wait(.1)
 Quest5:Refresh("CREDITS by SKYL")
 wait(.1)
 Quest5:Refresh("CREDITS by SKYLA")
 wait(.1)
 Quest5:Refresh("CREDITS by SKYLAR")
 wait(.2)
 Quest5:Refresh("CREDITS by SKYLAR")
 wait(.3)
 Quest5:Refresh("CREDITS by SKYLAR")
 wait(.2)
 Quest5:Refresh("CREDITS by SKYLA")
 wait(.1)
 Quest5:Refresh("CREDITS by SKYL")
 wait(.1)
 Quest5:Refresh("CREDITS by SKY")
 wait(.1)
 Quest5:Refresh("CREDITS by SK")
 wait(.1)
 Quest5:Refresh("CREDITS by S")
 wait(.1)
 Quest5:Refresh("CREDITS by ")
 wait(.1)
 Quest5:Refresh("CREDITS by")
 wait(.1)
 Quest5:Refresh("CREDITS b")
 wait(.1)
 Quest5:Refresh("CREDITS ")
 wait(.1)
 Quest5:Refresh("CREDITS")
 wait(.1)
 Quest5:Refresh("CREDIT")
 wait(.1)
 Quest5:Refresh("CREDI")
 wait(.1)
 Quest5:Refresh("CRED")
 wait(.1)
 Quest5:Refresh("CRE")
 wait(.1)
 Quest5:Refresh("CR")
 wait(.1)
 Quest5:Refresh("C")
 wait(.1)
 Quest5:Refresh("")
 wait(.1)
 wait(.8)
    end)
 end
end)
Time = CrRight:Label("Server Time")
 local function UpdateTime()
 local GameTime = math.floor(workspace.DistributedGameTime+0.5)
 local Hour = math.floor(GameTime/(60^2))%24
 local Minute = math.floor(GameTime/(60^1))%60
 local Second = math.floor(GameTime/(60^0))%60
 Time:Refresh(Hour.." Hour - "..Minute.." Minute - "..Second.." Second")
    
end
spawn(function()
       while true do
          UpdateTime()
          game:GetService("RunService").RenderStepped:Wait()
       end
end)
CrLeft:Label("#Wanz_Biasalah")
CrLeft:Label("Join To Our Grup")
CrLeft:Button("Discord Link", function()
    setclipboard("Wanz_20#3973")
end)
CrLeft:Button("Telegram Link", function()
    setclipboard("https://t.me/+WXvREiqXASUzNThl")
end)
CrRight:Button("Anti AFK", function()
    local GC = getconnections or get_signal_cons
    if GC then
        for i,v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        print("Unlucky.")
        local vu = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:connect(function()
            vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
            wait(1)
            vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        end)
    end

    local VirtualUser=game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
    end)
end)
CrRight:Button("FPS Boost", function()
local decalsyeeted = true 
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
for i, v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Sky") then
        v.StarCount = 0
        v.CelestialBodiesShown = false
    elseif v:IsA("SurfaceAppearance") then
        v:Destroy()
    elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    end
end
for i, e in pairs(l:GetChildren()) do
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    elseif e:IsA("BasePart") then
        e.CastShadow = false
    elseif e:IsA("Atmosphere") then
        e.Density = 0
		e.Offset = 0
		e.Glare = 0
		e.Haze = 0
    end
end
end)
CrRight:Button("Rejoin Server", function()
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Rejoin = coroutine.create(function()
    local Success, ErrorMessage = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)

    if ErrorMessage and not Success then
        warn(ErrorMessage)
    end
end)

coroutine.resume(Rejoin)
end)
CrRight:Button("ESP Player", function()
    function isnil(thing)
        return (thing == nil)
    end
    local function round(n)
        return math.floor(tonumber(n) + 0.5)
    end
    function UpdatePlayerChams()
        for i,v in pairs(game:GetService'Players':GetChildren()) do
            pcall(function()
                wait(.1)
                if not isnil(v.Character) then
                    for _,k in pairs(v.Character:GetChildren()) do
                        if k:IsA'BasePart' and not k:FindFirstChild'Cham' then
                            local cham = Instance.new('BoxHandleAdornment',k)
                            cham.ZIndex= 10
                            cham.Adornee=k
                            cham.AlwaysOnTop=true
                            cham.Size=k.Size
                            cham.Transparency=.8
                            cham.Color3=Color3.new(0,0,1)
                            cham.Name = 'Cham'
                        end
                    end
                    if not isnil(v.Character.Head) and not v.Character.Head:FindFirstChild'NameEsp' then
                        local bill = Instance.new('BillboardGui',v.Character.Head)
                        bill.Name = 'NameEsp'
                        bill.Size=UDim2.new(1,200,1,30)
                        bill.Adornee=v.Character.Head
                        bill.AlwaysOnTop=true
                        local name = Instance.new('TextLabel',bill)
                        name.Font = Enum.Font.GothamBold
                        name.TextWrapped=true
                        name.Text = (v.Name ..' '.. round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude/3) ..'m')
                        name.Size = UDim2.new(1,0,1,0)
                        name.TextYAlignment='Top'
                        name.TextColor3=Color3.fromRGB(0, 250, 0)
                        name.BackgroundTransparency=1
                        else
                        v.Character.Head.NameEsp.TextLabel.Text = (v.Name ..' '.. round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude/3) ..'m')
                    end
                end
            end)
        end
    end
    while wait(0.1) do
        UpdatePlayerChams()
    end
end)
CrLeft:Button("Destroy Gui", function()
    game.CoreGui:FindFirstChild("Library"):Destroy()
end)

return SkyLib